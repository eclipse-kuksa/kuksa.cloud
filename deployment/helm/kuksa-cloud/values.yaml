######################################################################
# Copyright (c) 2020 Bosch.IO GmbH [and others]
#
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
########################################################################
# credentials for the registry hosting privat container images (e.g. Hono-InfluxDB-Connector)
imageCredentials:
  registry: 
  username: 
  password: 

# sets the domain for the hosts used for the API gateway (Ambassador)
dns:
  domain: example.org
  enabled: false

# configure the Hono-InfluxDB-Connector
connector:
  # The name of the container image for the connector. Note that the address of the container registry under imageCredentials.registry is added as prefix and that the image should be tagged with the App version of this chart.
  image: hono-influxdb-connector
  imagePullPolicy: Always
  qpidRouterPort: 15671
  honoTrustedStorePath: /etc/hono/trusted-certs.pem
  honoVerifyHostname: false
  # The credentials for the dispatch router endpoint in Eclipse Hono. The default values in this chart are also the default credentials for that endpoint.
  honoUser: consumer@HONO
  honoPassword: verysecret
  loggingLevel: INFO
  # This part can be used to configure the connections on which the connector will listen. The 'tenantId' indicates the tenant in Eclipse Hono on which the connector will connect. The connector then writes all messages received from the respective tenant to the database specified in 'influxDatabaseName'. 
  connections:
    - tenantId: tenant1
      influxDatabaseName: tenant1-data
    - tenantId: tenant2
      influxDatabaseName: tenant2-data

# configure the app store
appstore:
  image: kuksa-appstore
  service:
    type: ClusterIP
  credentials: 
    username: admin
    password: admin
  hawkbit:
    username: admin
    password: admin
  keycloak:
    # these values need to be configured within Keycloak
    realm: "app-store-realm"
    resource: "app-store"
    # the address under which Keycloak is publicly available (e.g. the public address of the LoadBalancer service for Keycloak)
    url: "http://localhost:80/auth"
    principalAttribute: "prefered_username"
    credentials:
      # the secret can be set and generated for the client used by the app store in the mangement UI of Keycloak
      secret: "secret"
  vaadinProductionModeEnabled: "true"
    

# control which dependencies should be deployed (enabled: true)
components:
  hono:
    enabled: true
  influxdb:
    enabled: true
  hawkbit:
    enabled: true
  keycloak:
    enabled: true
  ambassador:
    enabled: true
  certmanager:
    enabled: false

# configure the values from the Eclipse Hono Helm chart fetched from https://github.com/eclipse/packages/tree/master/charts/hono
hono:
  useLoadBalancer: false
  adapters:
    amqp:
      enabled: false
    mqtt:
      enabled: false

# configure the values from the Keycloak chart fetched from https://github.com/codecentric/helm-charts/tree/master/charts/keycloak
keycloak:
  tcpMappingActive: true
  keycloak:
    username: keycloak
    password: admin
    service:
      type: ClusterIP

ambassador:
  replicaCount: 2
  enableAES: false
  image:
      repository: docker.io/datawire/ambassador
  service:
    ports: [{"name": "http","port": 80,"targetPort": 8080},{"name": "https","port": 443,"targetPort": 8443},{"name": "grafana","port": 3000,"targetPort": 3000}, {"name": "hawkbit","port": 38080,"targetPort": 38080}, {"name": "influxdb","port": 8086,"targetPort": 8086}, {"name": "keycloak","port": 48080,"targetPort": 48080}, {"name": "mqtt-adapter","port": 1883,"targetPort": 1883}, {"name": "http-adapter","port": 18080,"targetPort": 18080}, {"name": "app-store","port": 58080,"targetPort": 58080}, {"name": "dispatch-router","port": 5671,"targetPort": 15671}, {"name": "device-registry","port": 28080,"targetPort": 28080}]
    http:
      enabled: true
      port: 80
      targetPort: 80
    https:
      port: 8443
      targetPort: 8443
    loadBalancerIP: localhost
    # The annotations are specific to the Cloud provider (see https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer ). The default annotation in this chart is suited for Azure to allow the assignment of an Azure managed IP-address to the LoadBalancer service of the Ambassador. One needs to replace "kuksa" with the actual name of the resource group of the IP-address assigned in 'loadBalancerIP' and allow the service principle for the AKS to access the IP-address. For more information see https://docs.microsoft.com/en-us/azure/aks/static-ip. 
    annotations: 
      service.beta.kubernetes.io/azure-load-balancer-resource-group: "azure-resource-group"

    cert-manager:
      installCRDs: true

    #The cert manager is used to request certificates from Let's encrypt using ACME with a DNS-01 challeng. For more information visit https://cert-manager.io/docs/configuration/acme/dns01/ or consult the Readme file. For this Chart we assume that the Kuksa Cloud is hosted in an Azure environment. An introduction of the required information for the ACME challenge in Azure and how to obtain those values is available under: https://cert-manager.io/docs/configuration/acme/dns01/azuredns/. If you are using another environment for managing your DNS entries, you need to adapt the respective issuer in templates/cert-manager.
certificates:
  productionCertificate: false
  sslForTcpMappings: false
  sslForHttpMappings: false
  azureSubscriptionId: 
  azureTenantId: 
  azureResourceGroup: 
  azureSpId: 
  azureSpPassword: 
